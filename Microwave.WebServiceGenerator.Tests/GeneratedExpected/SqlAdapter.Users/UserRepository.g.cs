//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SqlAdapter.Users
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Domain.Users;
    using Application.Users;
    using Microsoft.EntityFrameworkCore;
    
    
    public class UserRepository : IUserRepository
    {
        
        public EventStoreContext EventStore { get; private set; }
        
        public UserRepository(EventStoreContext EventStore)
        {
            this.EventStore = EventStore;
        }
        
        public async Task CreateUser(User user)
        {
            EventStore.Users.Add(user);
            await EventStore.SaveChangesAsync();
        }
        
        public async Task UpdateUser(User user)
        {
            EventStore.Users.Update(user);
            await EventStore.SaveChangesAsync();
        }
        
        public async Task<User> GetUser(Guid id)
        {
            return await EventStore.Users.Include(entity => entity.MyPosts).Include(entity => entity.PinnedPost).Include(entity => entity.MyPosts).FirstOrDefaultAsync(entity => entity.Id == id);
        }
        
        public async Task<List<User>> GetUsers()
        {
            return await EventStore.Users.Include(entity => entity.MyPosts).Include(entity => entity.PinnedPost).Include(entity => entity.MyPosts).ToListAsync();
        }
        
        public async Task<User> GetMyPostsParent(Guid childId)
        {
            return await EventStore.Users.Include(entity => entity.MyPosts).Include(entity => entity.PinnedPost).Include(entity => entity.MyPosts).FirstOrDefaultAsync(parent => parent.MyPosts.Any(child => child.Id == childId));
        }
        
        public async Task<User> GetPinnedPostParent(Guid childId)
        {
            return await EventStore.Users.Include(entity => entity.MyPosts).Include(entity => entity.PinnedPost).Include(entity => entity.MyPosts).FirstOrDefaultAsync(parent => parent.PinnedPost.Id == childId);
        }
    }
}
